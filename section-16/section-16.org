#+TITLE: Kubernetes Management Techniques

** Run, Create, and Expose Generators

- These commands use helper templates called "generators"
- Every resource in kubernetes has a specification or "spec"
  - ~kubectl create deployment sample --image nginx --dry-run -o yaml~

- You can output those templates with ~--dry-run -o yaml~
- You can use those YAML defaults as a starting point
- Generators are "opinionated default"

** Generator Examples

- Using dry-run with yaml output we can see the generators

  #+BEGIN_SRC bash
    kubectl create deployment test --image nginx --dry-run=client -o yaml
    kubectl create job test --image nginx --dry-run=client -o yaml
    # You need the deployment to exist before this works
    kubectl expose deployment/test --port 80 --dry-run=client -o yaml
  #+END_SRC

- Let's remove the deployment
  - ~kubectl delete deployment test~

** Old Run Confusion

#+BEGIN_SRC bash
  kubectl run test --image nginx --dry-run
  kubectl run test --image nginx --port 80 --expose --dry-run
  kubectl run test --image nginx --restart OnFailure --dry-run
  kubectl run test --image nginx --restart Never --dry-run
  kubectl run test --image nginx --schedule "*/1 * * * *" --dry-run
#+END_SRC

** Imperative vs Declarative

- Imperative: Focus on /how/ a program operates
- Declarative: Focus on /what/ a program should accomplish

** Kubernetes Imperative

- Examples: ~kubectl run~, ~kubectl create deployment~, ~kubectl update~
  - We start with a state we know (no deployment exists)
  - We ask kubectl run to create a deployment
- Different commands are required to change that deployment
- Different commands are required per object
- Imperative is easier when you know the state
- Imperative is easier to get started
- Imperative is easier for humans at the CLI
- Imperative is NOT easy to automate

** Kubernetes Declarative

- Example: ~kubectl apply -f my-resources.yaml~
  - We don't know the current state
  - We only know that we want the end result to be (yaml contents)
- Same command each time (tiny exception for delete)
- Resources can be all in a file, or many files (apply a whole dir)
- Requires understanding the YAML keys and values
- More work than ~kubectl run~ for just starting a pod
- The easiest way to automate
- The eventual path to GitOps happiness

** Three Management Approaches

- *Imperative commands:* ~run~, ~expose~, ~scale~, ~edit~, ~create deployment~
  - Best for dev/learning/personal projects
  - Easy to learn, hardest to manage over time
- *Imperative objects:* ~create -f file.yml~, ~replace -f file.yml~, ~delete~...
  - Good for prod of small environments, single file per command
  - Store your changes in git-based yaml files
  - Hard to automate
- *Declarative objects:* ~apply -f file.yml~ or ~dir\~, ~diff~
  - Best for prod, easier to automate
  - Harder to understand and predict changes
- *Most Important Rule:*
  - Don't mix the three approaches
- *Bret's recommendations:*
  - Learn the imperative CLI for easy control of local and test setups
  - Move to ~apply -f file.yml~ and ~apply -f directory\~ for prod
  - Store yaml in git, git commit each change before you apply
  - This trains you for later doing GitOps (where git commits are automatically
    applied to clusters)
