#+TITLE: Moving to Declarative Kubernetes YAML

** Using kubectl apply

- create/update resources in a file
  - ~kubectl apply -f myfile.yaml~

- create/update a whole directory of yaml
  - ~kubectl apply -f myyaml/~

- create/update from a URL
  - ~kubectl apply -f https://bret.run/pod.yml~

- Be careful, lets look at it first (browser or curl)
  - ~curl -L https://bret.run/pod~
  - Win PoSH? start https://bret.run/pod.yml

** Kubernetes Configuration YAML

- Kubernetes configuration file (YAML or JSON)
- Each file contains one or more manifests
- Each manifest describes an API object (deployment, job, secret)
- Each manifest needs four parts (root key:values in the file)

  #+BEGIN_SRC yaml
    apiVersion:
    kind:
    metadata:
    spec:
  #+END_SRC

** Building Your YAML Files

- *kind:* We can get a list of resources the cluster supports
  - ~kubectl api-resources~

- Notice some resources have multiple API's (old vs new)
- *apiVersion:* We can get the API versions the cluster supports
  - ~kubectl api-version~

- *metadata:* only name is required
- *spec:* Where all the action is at!

** Building Your YAML spec

- We can get all the keys each *kind* supports

  #+BEGIN_SRC bash
    kubectl explain services --recursive
    kubectl explain services.spec
  #+END_SRC

- We can walk through the spec this way
  - ~kubectl explain services.spec.type~

- *spec:* can have sub spec: of other resources
  - ~kubectl explain deployment.spec.template.spec.volumes.nfs.server~

** Dry Runs With Apply YAML

- dry-run a create (client side only)
  - ~kubectl apply -f app.yml --dry-run=client~

- dry-run a create/update on server
  - ~kubectl apply -f app.yml --dry-run=server~

- see a diff visually
  - ~kubectl diff -f app.yml~

** Label and Annotations

- *Labels* goes under =metadata:= in your YAML
- Simple list of =key: value= for identifying your resource later by selecting,
  grouping, or filtering for it
- Common examples include =tier: frontend=, =app: api=, =env: prod=, =customer: acme.co=
- Not meant to hold complex, large, or non-identifying info, which is what
  *anotations* are for
- filter a get command
  - ~kubectl get pods -l app=nginx~

- apply only matching labels
  - ~kubectl apply -f myfile.yaml -l app=nginx~

** Label Selectors

- The "glue" telling Services and Deployments which pods are theirs
- Many resources use Label Selectors to "link" resource dependencies
- You'll see these match up in the Service and Deployment YAML
- Use Labels and Selectors to control which pods go to which nodes
- Taints and Tolerations also control node placement
